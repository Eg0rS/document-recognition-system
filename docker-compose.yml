version: '3.9'

networks:
  external:
  internal:
  files:
  kafka:

services:
  api:
    build:
      context: api/
      dockerfile: Dockerfile
    networks:
      - external
      - internal
    ports:
      - "8080:8080"
    depends_on:
      - nginx
      - kafka
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENV}
    restart: always
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 512M

  file-service:
    build:
      context: file-service
    environment:
      "env": "${ENV}"
    depends_on:
      - minio
    networks:
      - internal
      - files
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 2048M 
  
  ml-processing-service:
    build: ./ml-processing-service
    networks:
      - internal
      - kafka
    depends_on:
       - file-service
       - api
       - kafka
    environment:
      - ENV=${ENV}
    restart: always
    deploy:
      replicas: ${REPLICAS}

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9099:9099"
    networks:
      - files
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - storage-minio:/data
    command: server --address ":9099" --console-address ":9000" /data
    restart: always 

  kafka:
    image: bitnami/kafka:latest
    restart: on-failure
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - kafka
      - internal
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    depends_on:
      - zookeeper
  
  zookeeper:
    image: bitnami/zookeeper:latest
    restart: on-failure
    networks:
      - kafka
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kowl:
    image: quay.io/cloudhut/kowl:v1.4.0
    restart: on-failure
    networks:
      - kafka
    volumes:
    - ./kowl_config:/etc/kowl/
    ports:
    - "9090:8080"
    entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
    depends_on:
      - kafka

  nginx:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    networks:
      - external
    # Uncomment the next line if you uncomment anything in the section
    # environment:
      # Uncomment this if you want to change the location of
      # the SQLite DB file within the container
      # DB_SQLITE_FILE: "/data/database.sqlite"

      # Uncomment this if IPv6 is not enabled on your host
      # DISABLE_IPV6: 'true'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
  
volumes:
  storage-minio: