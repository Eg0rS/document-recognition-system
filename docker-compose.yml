version: '3.7'

networks:
  external:
    driver: bridge
  internal:
    driver: bridge
  files:
    driver: bridge
  kafka:
    driver: bridge
  postgres:
    driver: bridge

services:
  api:
    build:
      context: api/
      dockerfile: Dockerfile
    networks:
      - external
      - internal
      - kafka
    ports:
      - "8080:8080"
    depends_on:
      - file-service
      - nginx
      - kafka
      - database
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENV}
    restart: always
    deploy:
      replicas: 1

  file-service:
    build:
      context: file-service
    ports:
      - 10002:10002
    depends_on:
      - minio
    networks:
      - internal
      - files
    deploy:
      replicas: 1

  ml-processing-service:
    build: ./ml-processing-service
    networks:
      - internal
      - kafka
      - files
    depends_on:
      - file-service
      - kafka
    environment:
      - ENV=${ENV}
    restart: always
    deploy:
      replicas: ${REPLICAS}

  zookeeper:
    image: bitnami/zookeeper:latest
    networks:
      - kafka
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:latest
    networks:
      - kafka    
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper

  kafka-ui:
    container_name: kafka-ui
    networks:
      - kafka
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8082:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'

  nginx:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
    networks:
      - external
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt

  database:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'root'
      POSTGRES_DB: 'production'
    networks:
      - internal
    ports:
      - "5432:5432"
    volumes:
      - database-pg:/var/lib/postgresql/data

  minio:
    image: minio/minio:latest
    networks:
      - files
    ports:
      - '9000:9000' 
      - "9099:9099"
    expose:
      - "9000"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - storage-minio:/data
    command: server --address ":9099" --console-address ":9000" /data
    restart: always 

volumes:
  storage-minio:
  database-pg:
